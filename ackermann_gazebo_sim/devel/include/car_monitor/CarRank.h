// Generated by gencpp from file car_monitor/CarRank.msg
// DO NOT EDIT!


#ifndef CAR_MONITOR_MESSAGE_CARRANK_H
#define CAR_MONITOR_MESSAGE_CARRANK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_monitor
{
template <class ContainerAllocator>
struct CarRank_
{
  typedef CarRank_<ContainerAllocator> Type;

  CarRank_()
    : car_rank()  {
    }
  CarRank_(const ContainerAllocator& _alloc)
    : car_rank(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _car_rank_type;
  _car_rank_type car_rank;





  typedef boost::shared_ptr< ::car_monitor::CarRank_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_monitor::CarRank_<ContainerAllocator> const> ConstPtr;

}; // struct CarRank_

typedef ::car_monitor::CarRank_<std::allocator<void> > CarRank;

typedef boost::shared_ptr< ::car_monitor::CarRank > CarRankPtr;
typedef boost::shared_ptr< ::car_monitor::CarRank const> CarRankConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_monitor::CarRank_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_monitor::CarRank_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_monitor::CarRank_<ContainerAllocator1> & lhs, const ::car_monitor::CarRank_<ContainerAllocator2> & rhs)
{
  return lhs.car_rank == rhs.car_rank;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_monitor::CarRank_<ContainerAllocator1> & lhs, const ::car_monitor::CarRank_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_monitor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_monitor::CarRank_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_monitor::CarRank_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_monitor::CarRank_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_monitor::CarRank_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_monitor::CarRank_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_monitor::CarRank_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_monitor::CarRank_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c93f5f28361737bd4f54c4b01de9c55c";
  }

  static const char* value(const ::car_monitor::CarRank_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc93f5f28361737bdULL;
  static const uint64_t static_value2 = 0x4f54c4b01de9c55cULL;
};

template<class ContainerAllocator>
struct DataType< ::car_monitor::CarRank_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_monitor/CarRank";
  }

  static const char* value(const ::car_monitor::CarRank_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_monitor::CarRank_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] car_rank  # 车辆顺序\n"
;
  }

  static const char* value(const ::car_monitor::CarRank_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_monitor::CarRank_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_rank);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarRank_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_monitor::CarRank_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_monitor::CarRank_<ContainerAllocator>& v)
  {
    s << indent << "car_rank[]" << std::endl;
    for (size_t i = 0; i < v.car_rank.size(); ++i)
    {
      s << indent << "  car_rank[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.car_rank[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MONITOR_MESSAGE_CARRANK_H
